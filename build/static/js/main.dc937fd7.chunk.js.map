{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","getGifList","a","provider","getProvider","program","Program","account","fetch","publicKey","console","log","createGifAccount","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","toString","checkIfWalletIsConnected","window","solana","connect","onIfTrusted","response","alert","connection","Connection","Provider","connectWallet","onInputChange","event","target","value","sendGif","length","addGif","error","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc937fd7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport twitterLogo from \"./assets/twitter-logo.svg\";\r\nimport \"./App.css\";\r\nimport idl from \"./idl.json\"\r\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor' \r\nimport kp from './keypair.json'\r\n// SystemProgram is a reference to the Solana runtime!\r\nconst { SystemProgram,Keypair } = web3;\r\n\r\n// Create a keypair for the account that will hold the GIF data\r\nconst arr = Object.values(kp._keypair.secretKey)\r\nconst secret = new Uint8Array(arr);\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\r\n//Get our program's id from the IDL file\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Set our network to devnet.\r\nconst network = clusterApiUrl('devnet');\r\n\r\n//Controls how we want to acknowledge when a transaction is \"done\".\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\n\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = \"adarshzpatel\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [gifList,setGifList] = useState([]);\r\n\r\n  const getGifList = async() => {\r\n    try {\r\n       const provider = getProvider();\r\n       const program = new Program(idl,programID,provider);\r\n       const account = await program.account.baseAccount.fetch(baseAccount.publicKey)\r\n       console.log(\"Got the account\",account)\r\n       setGifList(account.gifList)\r\n      } catch (error) {\r\n        console.log(\"Errors in getGifList: \",error)\r\n        setGifList(null);\r\n      }\r\n\r\n  }\r\n\r\n  const createGifAccount = async () => {\r\n    try{\r\n      const provider = getProvider();\r\n      const program = new Program(idl,programID,provider);\r\n      console.log(\"ping\");\r\n      await program.rpc.startStuffOff({\r\n        accounts:{\r\n          baseAccount:baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers:[baseAccount]\r\n      });\r\n      console.log(\"Created a new BaseAccount w/ address:\",baseAccount.publicKey.toString())\r\n      await getGifList();\r\n\r\n    } catch(error) {\r\n      console.log(\"Error creating BaseAccount account: \",error)\r\n    }\r\n  }\r\n\r\n  const renderConnectedContainer = () => {\r\n    //If we hit this , it means the program account hasn't been initalized \r\n    if(gifList === null){\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <button className=\"cta-button submit-gif-button\" onClick={()=>createGifAccount()}>Do One Time Initialization For Gif Program Account </button>\r\n        </div>\r\n      )\r\n    }\r\n    // Otherwise ,we're good! Account exist. User can sbumit GIFs;'\r\n    else {\r\n      return(\r\n        <div className=\"connected-container\">\r\n          <form onSubmit={(event)=>{\r\n            event.preventDefault();\r\n            sendGif();\r\n          }}>\r\n            <input type=\"text\" placeholder=\"Enter gif link!\" value={inputValue}\r\n            onChange={onInputChange}\r\n            />\r\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <div className=\"gif-grid\">\r\n            {gifList.map((item,index)=> (\r\n              <div className=\"gif-item\" key={index}>\r\n                <img src={item.gifLink} alt='gif'/>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\n  \r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n      if (solana) {\r\n        console.log(\"Phantom wallet found!\");\r\n        /*\r\n         * The solana object gives us a function that will allow us to connect\r\n         * directly with the user's wallet!\r\n         */\r\n        const response = await solana.connect({ onIfTrusted: true });\r\n        console.log(\r\n          \"Connected with Public key:\",\r\n          response.publicKey.toString()\r\n        );\r\n        // Set user's public key in state.\r\n        setWalletAddress(response.publicKey.toString());\r\n      } else {\r\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  \r\n  const getProvider = () => {\r\n    const connection = new Connection(network , opts.preflightCommitment)\r\n    const provider = new Provider (\r\n      connection, window.solana, opts.preflightCommitment\r\n    );\r\n    return provider\r\n  }\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n  // we want to render the connect button if theuser has'nt connected their wallet on our app yet\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to wallet\r\n    </button>\r\n  );\r\n\r\n  const onInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const sendGif = async () => {\r\n    if(inputValue.length === 0){\r\n      console.log(\"No gif link given!\")\r\n      return\r\n    }\r\n    console.log('Gif Link: ', inputValue);\r\n    try{\r\n      const provider = getProvider();\r\n      const program = new Program(idl,programID,provider);\r\n\r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        }\r\n      });\r\n      console.log(\"GIF successfully sent to program\", inputValue);\r\n    } catch(error) {\r\n      console.error(\"Error Sending Gif: \", error);\r\n    }\r\n  };\r\n\r\n  useEffect(()=> {\r\n    if(walletAddress){\r\n      console.log('Fetching GIF list...');\r\n      //  Call solana program\r\n      getGifList()\r\n    }\r\n  },[walletAddress])\r\n\r\n  \r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener(\"load\", onLoad);\r\n    return () => window.removeEventListener(\"load\", onLoad);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={walletAddress ? 'authed-container' : 'container'}>\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">One Piece Gifs</p>\r\n          <p className=\"sub-text\">\r\n            Journey to the ONE PIECE !!\r\n          </p>\r\n          {!walletAddress && renderNotConnectedContainer()}\r\n          {walletAddress && renderConnectedContainer()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built by @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}